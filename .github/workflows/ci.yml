name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  ECR_REGISTRY: ${{secrets.ECR_REGISTRY}}
  ECR_REPOSITORY: ${{secrets.ECR_REPOSITORY}}
  AWS_REGION: ap-south-1
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  SLACK_ICON_UR: ${{secrets.SLACK_ICON_URL}}

jobs:
  test:
    runs-on: ubuntu-latest  # or another operating system of your choice
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # or another version of Python that you need

      - name: Install dependencies
        run: make install  # or another command to install your dependencies

      - name: Run tests with pytest
        run: make test  # or another command to run your tests with pytest

      - name: Send Slack notification if build fails
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          text: "Build failed on branch: ${{ github.ref }}\nRepo: ${{ github.repository }}\nCommit: ${{ github.sha }}"
          channel: github-actions  # replace with your Slack channel
          icon_emoji: ":warning:"
          username: "GitHub Actions"
          color: "#FF0000"
          fields: repo,message,commit,author,action,eventName,eventPath,ref,workflow,job,took
        env:
          SLACK_WEBHOOK: ${{ env.SLACK_WEBHOOK_URL }}
          SLACK_ICON: ${{ env.SLACK_ICON_URL }}
          SLACK_USERNAME: github-bot

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' && needs.test.result == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{env.AWS_REGION}} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false 
          # username: AWS
          # password: --password-stdin
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Push Docker image to ECR
        run: docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure Kubernetes context
        run: |
          mkdir -p ~/.kube
          echo "${{ env.KUBE_CONFIG }}" | base64 -d > ~/.kube/config

      - name: Deploy to Kubernetes
        run: |
          sed "s/APP_IMAGE/$ECR_REGISTRY\/$ECR_REPOSITORY:${{ github.sha }}/g" k8s/staging-deployment.yaml | kubectl apply -f -

      - name: Wait for deployment
        run: kubectl rollout status deployment/my-app-staging

